/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package CheckPoint.Windows;

import CheckPoint.CheckPoint_Management_API_Object_Processor.general_network_object;
import General.Log;
import java.util.Iterator;
import java.util.Set;
import java.util.StringTokenizer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

/**
 *
 * @author Maciej
 */
public class CheckPoint_Network_Object_Dictionary_Window extends javax.swing.JFrame {

    
    Set<general_network_object>  network_object_set;
    
    general_network_object gno;
    public Log log_handler;
    
    general_network_object current_object;
    
    
    /**
     * Creates new form CheckPoint_Network_Object_Dictionary_Window
     */
    public CheckPoint_Network_Object_Dictionary_Window() {
        initComponents();
        
        

 
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        object_table = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        text_object_json_value = new javax.swing.JTextPane();
        jTextField1 = new javax.swing.JTextField();
        text_json_grep = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setTitle("Object Explorer");

        object_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Type", "Value", "NAT", "Comment", "Members", "Member of"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        object_table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        object_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                object_tableMouseClicked(evt);
            }
        });
        object_table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                object_tableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                object_tableKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                object_tableKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(object_table);

        text_object_json_value.setPreferredSize(new java.awt.Dimension(400, 400));
        text_object_json_value.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                text_object_json_valueCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jScrollPane2.setViewportView(text_object_json_value);

        text_json_grep.setToolTipText("<html> \nFilter json text \n</html>");
        text_json_grep.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                text_json_grepPropertyChange(evt);
            }
        });
        text_json_grep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                text_json_grepKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                text_json_grepKeyTyped(evt);
            }
        });

        jTextField3.setText("jTextField3");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(text_json_grep))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(text_json_grep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void text_object_json_valueCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_text_object_json_valueCaretPositionChanged
      
       
        
    }//GEN-LAST:event_text_object_json_valueCaretPositionChanged

    private void object_tableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_object_tableKeyTyped
     // object_selection_changed();
       // enter 
    }//GEN-LAST:event_object_tableKeyTyped

    private void object_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_object_tableMouseClicked
       
        object_selection_changed();
        // mouse
    }//GEN-LAST:event_object_tableMouseClicked

    private void object_tableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_object_tableKeyPressed
         
        // arrows 
      //  object_selection_changed();
        
    }//GEN-LAST:event_object_tableKeyPressed

    private void object_tableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_object_tableKeyReleased
       
           object_selection_changed();
        
    }//GEN-LAST:event_object_tableKeyReleased

    private void text_json_grepPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_text_json_grepPropertyChange
      
      
        
    }//GEN-LAST:event_text_json_grepPropertyChange

    private void text_json_grepKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_text_json_grepKeyTyped
        
       
        
        
    }//GEN-LAST:event_text_json_grepKeyTyped

    private void text_json_grepKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_text_json_grepKeyReleased
        
        grep_json_text_action();
        
    }//GEN-LAST:event_text_json_grepKeyReleased
    
    public void grep_json_text_action()
    {
        
        
        
        
        if (current_object != null)
        {
           grep_json_text( current_object.json , text_json_grep.getText());
        }
        
        if (text_json_grep.getText().length() == 0)
        {
            
            text_object_json_value.setText(current_object.json);
            
        }
        

           
        
    }
    
    
    public void grep_json_text(String json, String search_text)
    {
        String return_string = "";
        
        // json search
        // [value1][value2]
       
        if (search_text.startsWith(">"))
        {
           try
           {
            search_text = search_text.replace(">", "");
               
            Object rss_parser = new JSONParser().parse(json);     
            JSONObject js_current_object = (JSONObject) rss_parser; 
            
            Object obj = (Object) js_current_object.get(search_text);
            
            if (obj!= null)
            {
                String temp = obj.toString();
                
                temp = temp.replace("[", "\n[ ");
                temp = temp.replace("{", "\n{ ");
                temp = temp.replace(",", "\n, ");
                temp = temp.replace("}", "\n} ");
                temp = temp.replace("]", "\n] ");
               
                text_object_json_value.setText(temp);
            }
            else
            {
                
              
                text_object_json_value.setText(json);
                
            }
            

            return;
            
           }
           catch (Exception e)
           {
               System.out.println(e.getLocalizedMessage());
                // text_object_json_value.setText(current_object.json);
               
           }
        }
        else
            
        
        
        
        
        
        // standard search
        
        
        
        
        
        
        {
        


            Pattern p = Pattern.compile(search_text);   // the pattern to search for                

            StringTokenizer st = new StringTokenizer(json,"\n");  



            while (st.hasMoreTokens()) 
            {  
                    String token = st.nextToken();
                    Matcher m = p.matcher(token);
                    //System.out.println();  

                    if (m.find())
                    {
                       return_string += token +"\n";

                    }

            }  


            text_object_json_value.setText(return_string);
        }
        
    }
    
    
    
    
    public void merge_log_handler(Log log_handler)
    {
        
        //this.log_handler = log_handler;
        
    }
    
    public void merge_object_set(Set<general_network_object>  network_object_set)
    {
        
        this.network_object_set = network_object_set;
        
    }
    
    
    
    public void object_selection_changed()
    {
        
        
        int row = object_table.getSelectedRow();
        String object_name = object_table.getModel().getValueAt(row, 0).toString();
        String object_type = object_table.getModel().getValueAt(row, 1).toString();
        //System.out.println("selected " + object_name);
        general_network_object gno = get_object_from_set( object_name , object_type);
        current_object = gno;
        
        if (text_json_grep.getText().length() == 0)
        {
            // grep not enabled
            if (gno.local_config == null)
            {
                
                gno.local_config = "";
                
            }
            if (gno.json == null)
            {
                
                gno.json = "";
                
            }
            
            text_object_json_value.setText( gno.json  );
        }
        else
        {
            // grep enabled
            grep_json_text_action();
        }
       
        
        
    }
    
    public general_network_object get_object_from_set(String name, String type)
    {
            
        
            Iterator iter = network_object_set.iterator();
          

            while(iter.hasNext())
            {
                

                 general_network_object set_item = (general_network_object) iter.next();

                 if (name.equals(set_item.name) && type.equals(set_item.type) )
                 {
                     
                    
                     return set_item;

                 }

            }
            
            return null;
        
        
        
        
        
    }
    
    
    public void add_network_object(general_network_object gno)
    {
        String name = "";
        
        try
        {
        
            
           DefaultTableModel GUI_Objects_Table_Model = (DefaultTableModel) object_table.getModel();
          
           String members = "";

           if (gno.members != null)
           {
                for (int i = 0 ; i < gno.members.length ; i++)
                {

                    members += gno.members[i].name + " ";

                }
           }
           
           
           String memberof = "";
           if (gno.member_of != null)
           {
                for (int i = 0 ; i < gno.member_of.length ; i++)
                {

                    memberof += gno.member_of[i] + " ";

                }
           }
           
           
           
           String port = "" ;
           
           if ((gno.port_start == null) || gno.port_start.equals("") )
           {
               // empty or null
               port = "";
               
           }
           else
           {
              
                port = gno.port_start ;
               
                
                
           }
           
           
           
           String address = "" ;
           
           if (gno.address.equals("") || (gno.address == null))
           {
               // empty or null
               address = "";
               
           }
           else
           {
              
                address = gno.address ;
               
           }
           
           
           
           
           if(gno.type.equals("dynamic-object") )
           {
               
               if (gno.dynamic_object_ranges != null)
               {

                //    for (int i = 0 ; i < gno.dynamic_object_ranges.length ; i++)
                 //   {



                      //  address += gno.dynamic_object_ranges[i].range_start;
                      //  address += "-";
                      //  address += gno.dynamic_object_ranges[i].range_end;
                     //   address += " ";


                  //  }
               }
               else
               {
                   
                   gno.address = "NOT LOADED";
                   
                   log_handler.log_in_gui("Warning: Dynamic Object '" + gno.name + "' not resolved. This should not happen. Please load local configuration first.\n" , "" , "");
                   
               }
               
               
           }
           
           
           String network = "" ;
           
           if (gno.network.equals("") || gno.network == null)
           {
               // empty or null
               
               network = "";
               
           }
           else
           {
               
                network = gno.network + "/" + gno.network_mask;
               
           }
                   
           String range = "";
           
           if (( gno.range_start == null) || (gno.range_start.equals("")))
           {
               // empty or null
               
               range = "";
               
           }
           else
           {
               
               range = gno.range_start + "-" + gno.range_end;
               
           }
                   
           
           String nat = "";
           

           
           if (gno.method == null) 
           {
               // not nat  
               
               
           }
           else
           {
               
               if (!gno.method.equals(""))
               {
                   


                    // nat is enabled

                        nat += gno.method + " behind " ;
                        
                        
                        String nat_address = gno.nat_address;
                        
                        if (nat_address == null)
                        {
                            
                            nat_address = "";
                            
                        }
                        
                        if (nat_address.equals(""))
                        {
                       
                            nat += "gateway ";

                        }
                        else
                        {
   
                            nat += gno.nat_address + " ";                  
                        }
                          
                    if (gno.install_on != null)
                    {
                        nat += "on ";

                        if (gno.install_on.equals(""))
                        {

                            nat += "ALL ";

                        }
                        else
                        {

                           nat += gno.install_on + " ";

                        }

                   }
                   
                
                }
           }
           
           
           GUI_Objects_Table_Model.addRow(
                   

                   new Object[]
                   
                   { 
                      gno.name,
                      gno.type,
                      address + network + range + port,
                      nat,
                      gno.comment,
                      members,
                      memberof
                           
                           
                      
                      
                   });
            
               Thread.sleep(50);
           
               
        if (object_table.getSelectedRow() == -1)
        {
            
            object_table.setRowSelectionInterval(0, 0);
            object_selection_changed();
        }
               
               
        }
        catch (Exception e)
        {
            
            
             log_handler.log_in_gui("(ANO) Error: " + e.getMessage(),  "10565", "");
             
             
        }
               
               
             //  int last_row = GUI_Ruleset_Table.getRowCount();
             //  GUI_Ruleset_Table.setRowHeight(last_row - 1, row_hight);
            
        
        
        
        
        
    }
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckPoint_Network_Object_Dictionary_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckPoint_Network_Object_Dictionary_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckPoint_Network_Object_Dictionary_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckPoint_Network_Object_Dictionary_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckPoint_Network_Object_Dictionary_Window().setVisible(true);
                

                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTable object_table;
    private javax.swing.JTextField text_json_grep;
    private javax.swing.JTextPane text_object_json_value;
    // End of variables declaration//GEN-END:variables
}
