/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Juniper.Windows;



import CheckPoint.Windows.CheckPoint_Management_API_STOP_Window;
import CheckPoint.Windows.CheckPoint_Management_API_Select_Layer_Window;
import General.Log;

import Juniper.Windows.Juniper_Management_API_Login_Window;
import JuniperNetworksAPI.Juniper_Management_API;
import java.io.UnsupportedEncodingException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.DefaultCaret;
/**
 *
 * @author Buka
 */
public class Juniper_MainWindow extends javax.swing.JFrame {

    //Variables declaration
    
    Log log_handler;
    Juniper_Management_API Juniper_Management_API_handler;  
    boolean get_layers_in_progres = false;
    
    /**
     * Creates new form Juniper_MainWindow
     */
    public Juniper_MainWindow() {
        initComponents();
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH); // Full screen start
    
    
        main_window_class_initializer();
    }

    
     public void main_window_class_initializer() //create new clas objects
    {
        
        log_handler = new Log(GUI_Log_Area);
        
        
        Juniper_Management_API_handler = new Juniper_Management_API();
        Juniper_Management_API_handler.merge_log_handler(log_handler);
       // Juniper_Management_API_handler.merge_rule_table(GUI_Ruleset_Table);
        
        DefaultCaret caret = (DefaultCaret) GUI_Log_Area.getCaret(); // ←
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);       // ←
    
        GUI_Scroll_Pane_Log_Area.setViewportView(GUI_Log_Area);
      //  JScrollPane scrollPane = new JScrollPane();
      //  scrollPane.setViewportView(GUI_Log_Area);

      
       // load_ruleset_view();
      
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GUI_Scroll_Pane_Log_Area = new javax.swing.JScrollPane();
        GUI_Log_Area = new javax.swing.JTextPane();
        GUI_Menu = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        Item_Juniper_MGMT_API_Exit = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        Item_Juniper_MGMT_API_Connection = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        Item_Juniper_Get_Access_Control_Layer = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        GUI_Log_Area.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        GUI_Log_Area.setPreferredSize(new java.awt.Dimension(100, 700));
        GUI_Scroll_Pane_Log_Area.setViewportView(GUI_Log_Area);

        jMenu3.setText("File");

        Item_Juniper_MGMT_API_Exit.setText("Exit");
        Item_Juniper_MGMT_API_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Item_Juniper_MGMT_API_ExitActionPerformed(evt);
            }
        });
        jMenu3.add(Item_Juniper_MGMT_API_Exit);

        GUI_Menu.add(jMenu3);

        jMenu1.setText("Connect");

        Item_Juniper_MGMT_API_Connection.setText("Management API");
        Item_Juniper_MGMT_API_Connection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Item_Juniper_MGMT_API_ConnectionActionPerformed(evt);
            }
        });
        jMenu1.add(Item_Juniper_MGMT_API_Connection);

        GUI_Menu.add(jMenu1);

        jMenu2.setText("Get");

        Item_Juniper_Get_Access_Control_Layer.setText("Access Control Layer");
        Item_Juniper_Get_Access_Control_Layer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Item_Juniper_Get_Access_Control_LayerActionPerformed(evt);
            }
        });
        jMenu2.add(Item_Juniper_Get_Access_Control_Layer);

        GUI_Menu.add(jMenu2);

        setJMenuBar(GUI_Menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(GUI_Scroll_Pane_Log_Area, javax.swing.GroupLayout.DEFAULT_SIZE, 889, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(309, Short.MAX_VALUE)
                .addComponent(GUI_Scroll_Pane_Log_Area, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Item_Juniper_MGMT_API_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Item_Juniper_MGMT_API_ExitActionPerformed

    }//GEN-LAST:event_Item_Juniper_MGMT_API_ExitActionPerformed

    private void Item_Juniper_MGMT_API_ConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Item_Juniper_MGMT_API_ConnectionActionPerformed

  //      log_handler.log_in_gui("Connection initialized.\n");
   //     try {
    //        GUI_Juniper_MGMT_API_Login();
    //    } catch (UnsupportedEncodingException ex) {
    //        Logger.getLogger(Juniper_MainWindow.class.getName()).log(Level.SEVERE, null, ex);
     //   }
        

    }//GEN-LAST:event_Item_Juniper_MGMT_API_ConnectionActionPerformed

    private void Item_Juniper_Get_Access_Control_LayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Item_Juniper_Get_Access_Control_LayerActionPerformed

        GUI_Juniper_MGMT_Get_Access_Control_Layer();

    }//GEN-LAST:event_Item_Juniper_Get_Access_Control_LayerActionPerformed

    
    
    public void GUI_Juniper_MGMT_Get_Access_Control_Layer()
    {
            /**
            if (!Juniper_Management_API_handler.API_SID_Return())
            {
                log_handler.log_in_gui("We do not have connection yet. Please use Connect -> Management API \n");
                return;
                
            }
        
        
            if (get_layers_in_progres == true)
            {
       
               try
               {
                    CheckPoint_Management_API_STOP_Window stop_window = new CheckPoint_Management_API_STOP_Window(this, rootPaneCheckingEnabled);
                    stop_window.set_info("Already In Progress", "Please wait till previous action will finish");
                    stop_window.setLocationRelativeTo ( null );
                    stop_window.setVisible(true);

               

                    stop_window.dispose();
                    return;
                    
               }
               catch (Exception e)
                {

                   return;

                }
            }
        

            if ( !CheckPoint_Management_API_handler.API_Still_Connected())
            {
                // not connected

                CheckPoint_Management_API_handler.API_Login();


            }
            
            
           String show_layers_body = CheckPoint_Management_API_handler.Mgmt_API_body_builder_show_layers();
           String show_layers_respond = CheckPoint_Management_API_handler.Mgmt_API_REST_Call("show-access-layers", show_layers_body);
           
           String show_gateways_body = CheckPoint_Management_API_handler.Mmgt_API_body_builder_show_gateways();
           String show_gateways_respond = CheckPoint_Management_API_handler.Mgmt_API_REST_Call("show-simple-gateways", show_gateways_body);
           
           String show_clusters_body = CheckPoint_Management_API_handler.Mmgt_API_body_builder_show_clusters();
           String show_clusters_respond = CheckPoint_Management_API_handler.Mgmt_API_REST_Call("show-simple-clusters", show_clusters_body);
           
           
           
           CheckPoint_Management_API_Select_Layer_Window layer_window = new CheckPoint_Management_API_Select_Layer_Window(this, rootPaneCheckingEnabled);
           layer_window.log_handler_merge(log_handler);
           
           layer_window.load_combo_box_layer(show_layers_respond);
           layer_window.load_combo_box_gateways(show_gateways_respond);
           layer_window.load_combo_box_gateways(show_clusters_respond);
           
           layer_window.setLocationRelativeTo ( null );
           layer_window.setVisible(true);
           
           
           String selected_layer =  layer_window.get_selected_layers();
           String selected_firewall = layer_window.get_selected_firewall();
           boolean with_inline_layers = layer_window.get_with_inline_layers();
           
           
           new Thread(new Runnable() {
             public void run() {
           
                get_layers_in_progres = true;
                CheckPoint_Management_API_handler.Mgmt_API_Process_Ruleset(selected_layer, true, "" , with_inline_layers);
                get_layers_in_progres = false;
          
             }
           }).start();
        
        
    }
    **/
    
    }
    
    public void GUI_Juniper_MGMT_API_Login()
    { 
        
     Juniper.Windows.Juniper_Management_API_Login_Window GUI_Juniper_New_Connect= new Juniper_Management_API_Login_Window(this, rootPaneCheckingEnabled);
  //    CheckPoint.CheckPoint_Management_API_Window GUI_Check_Point_New_Connect = new CheckPoint_Management_API_Window();
      GUI_Juniper_New_Connect.setLocationRelativeTo ( null );
      GUI_Juniper_New_Connect.setVisible(true);
      
      
       
      
      if (GUI_Juniper_New_Connect.get_connect_action())
      {
       
          // connection 
                    
           String Management_IP = GUI_Juniper_New_Connect.get_management_ip();
           String Management_Port = GUI_Juniper_New_Connect.get_management_port();
           String Username = GUI_Juniper_New_Connect.get_username();
           char[] Password = GUI_Juniper_New_Connect.get_password();
           boolean IgnoreCert = GUI_Juniper_New_Connect.get_ignore_cert();
           
           
         
     //      Juniper_Management_API_handler.set_connection_paramters(Management_IP, Management_Port, Username, Password, IgnoreCert);
        
           
          
           
           new Thread(new Runnable() {
                public void run() {

                   get_layers_in_progres = true;
                   Juniper_Management_API_handler.API_Login();
                                     
                   
                   
                   get_layers_in_progres = false;

                }
           }).start();
        
           
      }
      
      
      GUI_Juniper_New_Connect.dispose();
        
        
    }
     
     
     
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Juniper_MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Juniper_MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Juniper_MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Juniper_MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Juniper_MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane GUI_Log_Area;
    private javax.swing.JMenuBar GUI_Menu;
    private javax.swing.JScrollPane GUI_Scroll_Pane_Log_Area;
    private javax.swing.JMenuItem Item_Juniper_Get_Access_Control_Layer;
    private javax.swing.JMenuItem Item_Juniper_MGMT_API_Connection;
    private javax.swing.JMenuItem Item_Juniper_MGMT_API_Exit;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    // End of variables declaration//GEN-END:variables
}
